name: Build
on:
  workflow_dispatch:

jobs:
  Build_Datasets:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          path: self

      - name: Download Tabular Editor and Default Rules
        shell: pwsh
        run: |
          $path = "${{ github.workspace }}\self"                       
          $tempPath = "$path\_temp"
          $toolPath = "$path\_tools\TE"
          New-Item -ItemType Directory -Path $tempPath -ErrorAction SilentlyContinue | Out-Null              

          Write-Host "##[debug]Downloading Tabular Editor binaries"
          $downloadUrl = https://github.com/TabularEditor/TabularEditor/releases/latest/download/TabularEditor.Portable.zip
          $zipFile = "$tempPath\TabularEditor.zip"
          Invoke-WebRequest -Uri $downloadUrl -OutFile $zipFile
          Expand-Archive -Path $zipFile -DestinationPath $toolPath -Force            

          Write-Host "##[debug]Downloading Dataset default rules"
          $downloadUrl = https://raw.githubusercontent.com/microsoft/Analysis-Services/master/BestPracticeRules/BPARules.json
          Invoke-WebRequest -Uri $downloadUrl -OutFile "$tempPath\Rules-Dataset.json"     

      - name: Run Dataset Rules
        shell: pwsh
        run: |
          $path = "${{ github.workspace }}\self"
          $tempPath = "$path\_temp"
          $toolPath = "$path\_tools\TE\TabularEditor.exe"
          $rulesPath = "$path\Rules-Dataset.json"

          if (!(Test-Path $rulesPath))
          {
              Write-Host "Running downloaded rules"
              $rulesPath = "$tempPath\Rules-Dataset.json"
          }

          $itemsFolders = Get-ChildItem -Path $path -Recurse -Include ("*.pbidataset", "*.pbism")

          foreach ($itemFolder in $itemsFolders)
          {     
              $itemPath = "$($itemFolder.Directory.FullName)\definition"

              if (!(Test-Path $itemPath))
              {
                  $itemPath = "$($itemFolder.Directory.FullName)\model.bim"

                  if (!(Test-Path $itemPath))
                  {
                      throw "Cannot find semantic model definition."
                  }
              }

              Write-Host "##[group]Running rules for: '$itemPath'"

              Start-Process -FilePath "$toolPath" -ArgumentList """$itemPath"" -A ""$rulesPath"" -V" -NoNewWindow -Wait

              Write-Host "##[endgroup]"
          }

  Build_Reports:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          path: self

      - name: Download PBIXInspector
        shell: pwsh
        run: |
          $path = "${{ github.workspace }}\self"
          $tempPath = "$path\_temp"
          $toolPath = "$path\_tools\PBIInspector"
          New-Item -ItemType Directory -Path $tempPath -ErrorAction SilentlyContinue | Out-Null

          Write-Host "##[debug]Downloading PBI Inspector"
          $downloadUrl = https://github.com/NatVanG/PBI-Inspector/releases/latest/download/win-x64-CLI.zip
          $zipFile = "$tempPath\PBIXInspector.zip"
          Invoke-WebRequest -Uri $downloadUrl -OutFile $zipFile
          Expand-Archive -Path $zipFile -DestinationPath $toolPath -Force                            

          Write-Host "##[debug]Downloading Report default rules"
          $downloadUrl = https://raw.githubusercontent.com/NatVanG/PBI-Inspector/main/Rules/Base-rules.json
          Invoke-WebRequest -Uri $downloadUrl -OutFile "$tempPath\Rules-Report.json"     

      - name: Run Report Rules
        shell: pwsh
        run: |
          $path = "${{ github.workspace }}\self"
          $tempPath = "$path\_temp"
          $toolPath = "$path\_tools\PBIInspector\win-x64\CLI\PBIXInspectorCLI.exe"
          $rulesPath = "$path\Rules-Report.json"

          if (!(Test-Path $rulesPath))
          {
              Write-Host "Running default downloaded rules"
              $rulesPath = "$tempPath\Rules-Report.json"
          }

          $itemsFolders = Get-ChildItem -Path $path -Recurse -Include *.pbir

          foreach ($itemFolder in $itemsFolders)
          {     
              $itemPath = $itemFolder.Directory.FullName
              
              Write-Host "##[group]Running rules for: '$itemPath'"

              Start-Process -FilePath "$toolPath" -ArgumentList "-pbipreport ""$itemPath"" -rules ""$rulesPath"" -formats ""ADO""" -NoNewWindow -Wait
              
              Write-Host "##[endgroup]"
          }
